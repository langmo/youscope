
Matlab data in memory
---------------------
M =
     1     2
     3     4
     5     6

rows=3 columns=2

Matlab matrix in memory:

idx  : 0 1 2 3 4 5
data : 1 3 5 2 4 6


p2i(x,y,rowCount): x*rowCount+y;



Bresenham
---------

       x0,y0         the seed point
       x1,y1         a border pixel of the image
       linepoints**  the coordinates of the line pixels x:linepoints[i][0] y:linepoints[i][1]
       values*       the line pixels' gray values minus the mean value along the line
       
The length of a bresenham line is max(abs(x0-x1), abs(y0-y1))


Convolution
-----------

        membranSignal     the normalized membrane signal
        convolutionImage  sums up the convolution values for each pixel
        lineCounter       matrix to counts the number of crossing lines per pixel
        n                 length of membrane signal

the convolution is the following scalar products

RAY:   *************************
SIG: 1 MMMMMMM                 |
     2  MMMMMMM                |
         ...                   |
                         MMMMMMM 
                          MMMMMMM
                          ...  |
     n                         MMMMMMM 

if the membrane signal is longer than the ray, only the first 0:n points of the membrane signal are convoluted.


Normalisation
-------------

        convolutionImage = convolutionImage/lineCounter


Grid graph
----------

        width         the width of the image  = horizontal vertex dimension 
        height        the height of the image = vertical vertex dimension 
        connectivity  4 or 8

    vertices are numbered row-wise:

 connectivity=4

    1--2--3--4
    |  |  |  |
    5--6--7--8
    |  |  |  |
    9-10-11-12

 connectivity=8

    1---2---3---4
    | X | X | X |
    5---6---7---8
    | X | X | X |
    9--10--11--12


Number of edges/vertices
------------------------
        xWidth        horizontal vertex dimension of the graph
        yWidth        vertical vertex dimension of the graph
        connectivity  4 or 8, see above

vertexCount = xWidth * yWidth
edgeCount   = (xWidth-1)*(yWidth-1)*connectivity/2 + xWidth + yWidth - 2;


Angle and distance
------------------

        u           idx of vertex u
        v           idx of vertex v
        xWidth      horizontal vertex dimension of the graph


[distance angle] = foo(u,v,xWidth){
    d = abs(u-v);
    if( abs(xWidth - d)==1 )
        distance = SQRT_2
    else
        distance = 1.0 
   
    angle=0
    if( d==1 )
      angle = PI_2
    else if( d==xWidth+1 || d==xWidth-1 )
      angle = PI_4
}    



Detection of non convex regions (=low energy membrane regions)
---------------------------------------------------------------


C-function 

logicalVec = findRegionCentersInCircularArray(v, minLen, spanLen)

Computes the centers of 1-stetches in v 
(v is considered to be circular ...,v(end),v(1),v(2),...)

v is a logical array that holds a 1 at the i-th position if the energy 
value of a membrane border pixel at pos i is below a threshold.

minLen is the minimum number of consecutive 1?s of a region in v 
(after smoothing with spanLen) to be included in the returned vector.
(minLen=0 or minLen=1 includes all regions)


If there are less than spanLen 0?s between two 1-regions then the two one regions are connected.
(spanLen=0 means no smoothing)


logicalVec has the same length as v and a 1 at every center.
If we have a vector linIdx with linear indices for the pixels on the membrane border, 
linIdx(ligicalVec) returns the centers of the smoothed weak regions.
 







