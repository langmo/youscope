/*******************************************************************************
 * Copyright (c) 2017 Moritz Lang.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Moritz Lang - initial API and implementation
 ******************************************************************************/
/**
 * 
 */
package org.youscope.server;

import java.io.LineNumberReader;
import java.io.Reader;
import java.util.Collections;
import java.util.Vector;

import org.youscope.addon.microscopeaccess.CameraDeviceInternal;
import org.youscope.addon.microscopeaccess.DeviceInternal;
import org.youscope.addon.microscopeaccess.MicroscopeInternal;
import org.youscope.addon.microscopeaccess.StageDeviceInternal;
import org.youscope.common.microscope.DeviceException;
import org.youscope.common.microscope.DeviceSetting;
import org.youscope.common.microscope.MicroscopeConfigurationException;
import org.youscope.common.microscope.MicroscopeException;
import org.youscope.common.microscope.MicroscopeLockedException;
import org.youscope.common.microscope.SettingException;

/**
 * Class to parse a microscope configuration file.
 * @author Moritz Lang
 * 
 */
class ConfigFileParser extends ConfigFileManipulator
{
	private final MicroscopeInternal		microscope;
	private final ChannelManagerImpl		channelManager;
	private final PixelSizeManagerImpl		pixelSizeManager;

	private Vector<ConfigFileParserDevice>	preInitDevices	= new Vector<ConfigFileParserDevice>();
	private boolean							isInitialized	= true;

	public ConfigFileParser(MicroscopeInternal microscope, ChannelManagerImpl channelManager, PixelSizeManagerImpl pixelSizeManager)
	{
		this.microscope = microscope;
		this.pixelSizeManager = pixelSizeManager;
		this.channelManager = channelManager;
	}

	private ConfigFileParserDevice getPreInitDevice(String deviceID) throws DeviceException
	{
		for(ConfigFileParserDevice device : preInitDevices)
		{
			if(device.getDeviceID().equals(deviceID))
				return device;
		}
		throw new DeviceException("Device with ID " + deviceID + " not defined.");
	}

	/**
	 * Parses a micro manager config file (read in by the reader) and saves its results in the given configuration. If no configuration is supplied,
	 * a new one is constructed.
	 * @param reader A reader reading in the config file.
	 * @param accessID Access ID to lock and manipulate the microscope configuration.
	 * @return The configuration where the information from the config file is stored in.
	 * @throws MicroscopeConfigurationException
	 * @throws MicroscopeLockedException
	 */
	public ConfigFileParseResult parseConfigFile(Reader reader, int accessID) throws MicroscopeConfigurationException, MicroscopeLockedException
	{
		ConfigFileParseResult parseResult = new ConfigFileParseResult();
		try
		{
			microscope.lockExclusiveWrite(accessID);

			LineNumberReader lineReader = new LineNumberReader(reader);
			int lineNumber = 0;
			String line = null;
			try
			{
				for(;; lineNumber++)
				{
					line = lineReader.readLine();
					if(line == null)
					{
						break;
					}

					// Dont't care about empty lines
					if(line.trim().length() == 0)
						continue;

					String[] tokens = line.split(",");
					for(int i=0; i<tokens.length; i++)
					{
						tokens[i] = tokens[i].trim();
					}

					// First, check for identification comments.
					if(isCommand(tokens, IDENT_GENERATOR))
					{
						parseResult.setConfigFileGenerator(new ConfigFileGenerator(tokens[1], tokens[2]));
						continue;
					}
					else if(isCommand(tokens, IDENT_COMPATIBLE))
					{
						parseResult.addCompatibleGenerator(new ConfigFileGenerator(tokens[1], tokens[2]));
						continue;
					}

					// Check for normal comments.
					if(tokens[0].startsWith("#"))
					{
						// Generally, that's a comment line. However, the first comment line might be useful to identify the generating program (i.e. MicroManager).
						if(lineNumber == 0 && tokens[0].startsWith("# Generated by Configurator"))
						{
							parseResult.setConfigFileGenerator(new ConfigFileGenerator("MicroManager", "unknown"));
						}
						continue;
					}

					// Check normal commands

					// Loading of devices
					if(isCommand(tokens, COMMAND_DEVICE))
						parseNewDevice(tokens);
					else if(isCommand(tokens, COMMAND_PARENT))
						parseParent(tokens);
					// Initialization / Uninitialization
					else if(isCommand(tokens, COMMAND_UNINITIALIZE))
						parseUninitialize(accessID);
					else if(isCommand(tokens, COMMAND_INITIALIZE))
						parseInitialize(accessID);

					// Image synchronization
					else if(isCommand(tokens, COMMAND_IMAGE_SYNCHRO))
						parseImageSynchro(tokens, accessID);

					// Driver communication timeout
					else if(isCommand(tokens, COMMAND_COMMUNICATION_TIMEOUT))
						parseCommunicationTimeout(tokens, accessID);

					// Image buffer size
					else if(isCommand(tokens, COMMAND_IMAGE_BUFFER_SIZE))
					{
						if(!parseImageBufferSize(tokens, accessID))
						{
							parseResult.addWarning("Setting the image buffer size is not supported by this microscope.", line);
						}
					}

					// Axis configuration cameras and stages.
					else if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_X))
						parseAxisConfiguration(tokens, accessID);
					else if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_Y))
						parseAxisConfiguration(tokens, accessID);
					else if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_XY))
						parseAxisConfiguration(tokens, accessID);
					else if(isCommand(tokens, COMMAND_STAGE_UNITS))
						parseStageUnits(tokens, accessID);

					// Standard devices/roles
					else if(isCommand(tokens, COMMAND_STANDARD_FOCUS))
						parseStandardFocus(tokens, accessID);
					else if(isCommand(tokens, COMMAND_STANDARD_AUTO_FOCUS))
						parseStandardAutoFocus(tokens, accessID);
					else if(isCommand(tokens, COMMAND_STANDARD_CAMERA))
						parseStandardCamera(tokens, accessID);
					else if(isCommand(tokens, COMMAND_STANDARD_STAGE))
						parseStandardStage(tokens, accessID);
					else if(isCommand(tokens, COMMAND_STANDARD_SHUTTER))
						parseStandardShutter(tokens, accessID);
					// The same, but only set via System.Startup
					else if(isCommand(tokens, COMMAND_SYSTEM_STANDARD_FOCUS))
						parseStandardFocus(new String[] {"Property", tokens[3], tokens[4], tokens[5]}, accessID);
					else if(isCommand(tokens, COMMAND_SYSTEM_STANDARD_AUTO_FOCUS))
						parseStandardAutoFocus(new String[] {"Property", tokens[3], tokens[4], tokens[5]}, accessID);
					else if(isCommand(tokens, COMMAND_SYSTEM_STANDARD_CAMERA))
						parseStandardCamera(new String[] {"Property", tokens[3], tokens[4], tokens[5]}, accessID);
					else if(isCommand(tokens, COMMAND_SYSTEM_STANDARD_STAGE))
						parseStandardStage(new String[] {"Property", tokens[3], tokens[4], tokens[5]}, accessID);
					else if(isCommand(tokens, COMMAND_SYSTEM_STANDARD_SHUTTER))
						parseStandardShutter(new String[] {"Property", tokens[3], tokens[4], tokens[5]}, accessID);

					// System startup & shutdown settings
					else if(isCommand(tokens, COMMAND_CORE_AUTOSHUTTER) || isCommand(tokens, COMMAND_SYSTEM_CORE_AUTOSHUTTER))
					{
						// Ignore this command. Auto-Shutter on/of is a property of the channel in YouScope.
						continue;
					}
					else if(isCommand(tokens, COMMAND_SYSTEM_STARTUP_CORE))
					{
						parseResult.addWarning("The MicroManager core device does not exist in YouScope. Only a few settings of it are translated into the respective YouScope settings.", line);
						continue;
					}
					else if(isCommand(tokens, COMMAND_SYSTEM_STARTUP))
						parseSystemStartup(tokens, accessID);
					else if(isCommand(tokens, COMMAND_SYSTEM_SHUTDOWN_CORE))
					{
						// Ignore this command: it does not make sense to change core setting one second before resetting them again...
						continue;
					}
					else if(isCommand(tokens, COMMAND_SYSTEM_SHUTDOWN))
						parseSystemShutdown(tokens, accessID);

					// Channel settings
					else if(isCommand(tokens, COMMAND_CHANNEL_AUTOSHUTTER))
						parseChannelAutoShutter(tokens, accessID);
					else if(isCommand(tokens, COMMAND_CHANNEL_AUTOSHUTTER_DEVICE))
						parseChannelAutoShutterDevice(tokens, accessID);

					// Pixel size settings
					else if(isCommand(tokens, COMMAND_CONFIG_PIXEL_SIZE))
						parseConfigPixelSize(tokens, accessID);
					else if(isCommand(tokens, COMMAND_PIXEL_SIZE))
						parsePixelSize(tokens, accessID);

					// Setting of device properties
					else if(isCommand(tokens, COMMAND_PROPERTY_CORE))
					{
						parseResult.addWarning("The MicroManager core device does not exist in YouScope. Only a few settings of it are translated into the respective YouScope settings.", line);
						continue;
					}
					else if(isCommand(tokens, COMMAND_PROPERTY))
						parseProperty(tokens, accessID);
					else if(isCommand(tokens, COMMAND_LABEL))
						parseLabel(tokens, accessID);
					else if(isCommand(tokens, COMMAND_DELAY))
						parseDelay(tokens, accessID);

					// Channel settings
					else if(isCommand(tokens, COMMAND_SYSTEM))
					{
						parseResult.addWarning("Only System.Startup and System.Shutdown interpreted by YouScope.", line);
					}
					else if(isCommand(tokens, COMMAND_CHANNEL))
						parseChannel(tokens, accessID);
					else if(isCommand(tokens, COMMAND_CHANNEL_DELAY))
						parseChannelDelay(tokens, accessID);

					// Everything else we do not know
					else
						parseResult.addWarning("Command unknown to YouScope", line);
				}
			}
			catch(Exception e)
			{
				throw new MicroscopeConfigurationException(e, line, lineNumber);
			}
			return parseResult;
		}
		finally
		{
			microscope.unlockExclusiveWrite(accessID);
		}
	}

	/**
	 * Returns if the tokens correspond to a command.
	 * It corresponds to the command, if the length of tokens and command is equal,
	 * and for every command unequal null the token equals the corresponding command.
	 * @param tokens Set of tokens.
	 * @param command Command to detect.
	 * @return
	 */
	private static boolean isCommand(String[] tokens, String[] command)
	{
		if(tokens.length != command.length)
			return false;
		for(int i = 0; i < command.length; i++)
		{
			if(command[i] == null)
				continue;
			if(!tokens[i].equals(command[i]))
				return false;
		}
		return true;
	}

	private void parseStageUnits(String[] tokens, int accessID) throws NumberFormatException, MicroscopeLockedException, DeviceException
	{
		microscope.getStageDevice(tokens[1]).setUnitMagnifier(Double.parseDouble(tokens[2]), accessID);
	}

	private void parseChannelAutoShutter(String[] tokens, int accessID) throws MicroscopeLockedException, SettingException
	{
		if(tokens[2].endsWith("_on"))
			tokens[2] = tokens[2].substring(0, tokens[2].length() - 3);

		// We are only interested in the inactivation of the auto-shutter. Each channel is anyway
		// configured to have the default shutter as autoshutter, thus only activating the autoshutter without defining which one
		// would have no effect.
		if(tokens[5].equals("0"))
		{
			channelManager.addChannel(tokens[1], tokens[2], accessID).setShutter(null, accessID);
		}
	}

	private void parseChannelAutoShutterDevice(String[] tokens, int accessID) throws MicroscopeLockedException, SettingException
	{
		if(tokens[2].endsWith("_on"))
			tokens[2] = tokens[2].substring(0, tokens[2].length() - 3);

		channelManager.addChannel(tokens[1], tokens[2], accessID).setShutter(tokens[5], accessID);
	}

	private void parseDelay(String[] tokens, int accessID) throws NumberFormatException, DeviceException, MicroscopeException, MicroscopeLockedException
	{
		microscope.getDevice(tokens[1]).setExplicitDelay(Double.parseDouble(tokens[2]), accessID);
	}

	private void parseLabel(String[] tokens, int accessID) throws NumberFormatException, MicroscopeException, MicroscopeLockedException, DeviceException
	{
		microscope.getStateDevice(tokens[1]).setStateLabel(Integer.parseInt(tokens[2]), tokens[3], accessID);
	}

	private boolean parseImageBufferSize(String[] tokens, int accessID) throws NumberFormatException, SettingException, MicroscopeLockedException
	{
		try
		{
			microscope.getMicroscopeConfiguration().setImageBufferSize(Integer.parseInt(tokens[5]), accessID);
			return true;
		}
		catch(@SuppressWarnings("unused") UnsupportedOperationException e)
		{
			return false;
		}
	}

	private void parseCommunicationTimeout(String[] tokens, int accessID) throws NumberFormatException, SettingException, MicroscopeLockedException
	{
		microscope.getMicroscopeConfiguration().setCommunicationTimeout(Integer.parseInt(tokens[5]), accessID);
	}

	private void parseProperty(String[] tokens, int accessID) throws DeviceException, MicroscopeException, MicroscopeLockedException, InterruptedException
	{
		if(isInitialized)
		{
			microscope.getDevice(tokens[1]).getProperty(tokens[2]).setValue(tokens[3], accessID);
		}
		else
		{
			getPreInitDevice(tokens[1]).addPreInitDeviceSetting(new DeviceSetting(tokens[1], tokens[2], tokens[3]));
		}
	}
	private void parseParent(String[] tokens) throws DeviceException
	{
		if(isInitialized)
		{
			throw new DeviceException("Hubs of devices must be declared before they are initialized.");
		}
		getPreInitDevice(tokens[1]).setHubID(tokens[2]);
	}

	private void parseUninitialize(int accessID) throws MicroscopeException, MicroscopeLockedException, InterruptedException
	{
		microscope.uninitializeMicroscope(accessID);
		isInitialized = false;
	}

	private void parseInitialize(int accessID) throws MicroscopeLockedException, MicroscopeException, InterruptedException
	{
		// Initialize COM-ports first.
		Collections.sort(preInitDevices);
		// Initialize devices.
		for(ConfigFileParserDevice device : preInitDevices)
		{
			device.initializeDevice(accessID);
		}

		microscope.initializeMicroscope(accessID);

		isInitialized = true;
	}

	private void parseSystemStartup(String[] tokens, int accessID) throws SettingException, MicroscopeLockedException
	{
		microscope.getMicroscopeConfiguration().addSystemStartupSetting(new DeviceSetting(tokens[3], tokens[4], tokens[5]), accessID);
	}

	private void parseSystemShutdown(String[] tokens, int accessID) throws SettingException, MicroscopeLockedException
	{
		microscope.getMicroscopeConfiguration().addSystemShutdownSetting(new DeviceSetting(tokens[3], tokens[4], tokens[5]), accessID);
	}

	private void parseImageSynchro(String[] tokens, int accessID) throws SettingException, MicroscopeLockedException
	{
		microscope.getMicroscopeConfiguration().addImageSynchronizationDevice(tokens[1], accessID);
	}

	private void parseChannel(String[] tokens, int accessID) throws MicroscopeLockedException, SettingException
	{
		// YouScope supports on and off settings for channels, MicroManager not.
		// YouScope therefore saves channels for which on and off settings exists as two channels,
		// one with the suffix "_on" and one with "_off".
		boolean onSettings = true;
		if(tokens[2].endsWith("_on"))
			tokens[2] = tokens[2].substring(0, tokens[2].length() - 3);
		else if(tokens[2].endsWith("_off"))
		{
			tokens[2] = tokens[2].substring(0, tokens[2].length() - 4);
			onSettings = false;
		}
		DeviceSetting setting = new DeviceSetting(tokens[3], tokens[4], tokens[5]);
		if(onSettings)
			channelManager.addChannel(tokens[1], tokens[2], accessID).addChannelOnSetting(setting, accessID);
		else
			channelManager.addChannel(tokens[1], tokens[2], accessID).addChannelOffSetting(setting, accessID);
	}

	private void parseChannelDelay(String[] tokens, int accessID) throws NumberFormatException, MicroscopeLockedException
	{
		if(tokens[2].endsWith("_on"))
			tokens[2] = tokens[2].substring(0, tokens[2].length() - 3);

		channelManager.addChannel(tokens[1], tokens[2], accessID).setChannelTimeout(Integer.parseInt(tokens[3]), accessID);
	}

	private void parseNewDevice(String[] tokens) throws SettingException
	{
		if(isInitialized)
			throw new SettingException("All devices must be defined after the command \"Property,Core,Initialize,0\" and before the command \"Property,Core,Initialize,1\"");
		preInitDevices.add(new ConfigFileParserDevice(tokens[1], tokens[2], tokens[3], microscope));
	}

	private void parseStandardFocus(String[] tokens, int accessID) throws DeviceException, MicroscopeLockedException
	{
		microscope.setFocusDevice(tokens[3], accessID);
	}

	private void parseStandardAutoFocus(String[] tokens, int accessID) throws DeviceException, MicroscopeLockedException
	{
		microscope.setAutoFocusDevice(tokens[3], accessID);
	}

	private void parseStandardCamera(String[] tokens, int accessID) throws DeviceException, MicroscopeLockedException
	{
		microscope.setCameraDevice(tokens[3], accessID);
	}

	private void parseStandardStage(String[] tokens, int accessID) throws DeviceException, MicroscopeLockedException
	{
		microscope.setStageDevice(tokens[3], accessID);
	}

	private void parseStandardShutter(String[] tokens, int accessID) throws DeviceException, MicroscopeLockedException
	{
		microscope.setShutterDevice(tokens[3], accessID);
	}

	private void parseConfigPixelSize(String[] tokens, int accessID) throws MicroscopeLockedException, SettingException
	{
		pixelSizeManager.addPixelSize(tokens[1], accessID).addPixelSizeSetting(new DeviceSetting(tokens[2], tokens[3], tokens[4]), accessID);
	}

	private void parsePixelSize(String[] tokens, int accessID) throws NumberFormatException, MicroscopeLockedException
	{
		pixelSizeManager.addPixelSize(tokens[1], accessID).setPixelSize(Double.parseDouble(tokens[2]), accessID);
	}

	private void parseAxisConfiguration(String[] tokens, int accessID) throws DeviceException, MicroscopeLockedException
	{
		DeviceInternal device = microscope.getDevice(tokens[3]);
		if(device instanceof CameraDeviceInternal)
		{
			if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_X))
				((CameraDeviceInternal)device).setTransposeX(!tokens[5].equals("0"), accessID);
			else if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_Y))
				((CameraDeviceInternal)device).setTransposeY(!tokens[5].equals("0"), accessID);
			else if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_XY))
				((CameraDeviceInternal)device).setSwitchXY(!tokens[5].equals("0"), accessID);
		}
		else if(device instanceof StageDeviceInternal)
		{
			if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_X))
				((StageDeviceInternal)device).setTransposeX(!tokens[5].equals("0"), accessID);
			else if(isCommand(tokens, COMMAND_AXIS_CONFIGURATION_Y))
				((StageDeviceInternal)device).setTransposeY(!tokens[5].equals("0"), accessID);
		}
	}
}
